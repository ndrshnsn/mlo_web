{"version":3,"file":"notifications_controller-CRdMywqS.js","sources":["../../../app/frontend/javascript/controllers/notifications_controller.js"],"sourcesContent":["import { Controller } from \"@hotwired/stimulus\"\nimport { post } from \"@rails/request.js\"\n\nexport default class NotificationsController extends Controller {\n\n  connect() {\n    let checkbox = this.element\n    checkbox.addEventListener('change', function () {\n      checker(this.checked)\n    })\n\n    function checker(checked) {\n      checked ? subscribe() : unsubscribe()\n    }\n    \n    function subscribe() {\n      if (navigator.serviceWorker) {\n        Notification.requestPermission()\n        .then((permission) => {\n          if (permission === \"granted\") {\n            navigator.serviceWorker.register('/serviceworker.js')\n            .then(function(registration) {\n              return registration.pushManager.getSubscription()\n              .then(function(subscription) {\n                if (subscription) {\n                  return subscription;\n                }\n                return registration.pushManager.subscribe({\n                  userVisibleOnly: true,\n                  applicationServerKey: window.vapidPublicKey\n                });\n              });\n            }).then(function(subscription) {\n              post(\n                '/notifications/subscribe', {\n                  body: {\n                    subscription: subscription.toJSON()\n                  },\n                  responseKind: \"turbo-stream\"\n                }\n              )\n            })\n          } else {\n            alert(\"Notifications declined\")\n          }\n        })\n        .catch(error => console.log(\"Notifications error\", error))\n      }\n    }\n \n    function unsubscribe() {\n      navigator.serviceWorker.ready\n      .then((serviceWorkerRegistration) => {\n        serviceWorkerRegistration.pushManager.getSubscription()\n          .then((subscription) => {\n            if ( subscription ) {\n              unregister()\n              subscription.unsubscribe()\n                .then(function() {\n                  post(\n                    '/notifications/unsubscribe', {\n                      body: {\n                        subscription: subscription.toJSON()\n                      },\n                      responseKind: \"turbo-stream\"\n                    }\n                  )\n                })\n                .catch((e) => {\n                  logger.error('Error thrown while unsubscribing from push messaging', e);\n                });\n              }\n          });\n      });\n    }\n\n    function unregister() {\n      navigator.serviceWorker.getRegistrations()\n      .then(registrations => {\n        registrations.forEach(registration => {\n          registration.unregister();\n        })\n      });\n\n      navigator.serviceWorker.getRegistrations().then(function(registrations) {\n      for(let registration of registrations) {\n        registration.unregister()\n      } })\n\n      if(window.navigator && navigator.serviceWorker) {\n        navigator.serviceWorker.getRegistrations()\n        .then(function(registrations) {\n          for(let registration of registrations) {\n            registration.unregister();\n          }\n        });\n      }\n\n      if ('caches' in window) {\n        caches.keys()\n          .then(function(keyList) {\n              return Promise.all(keyList.map(function(key) {\n                  return caches.delete(key);\n              }));\n          })\n      }\n\n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.getRegistrations().then(function (registrations) {\n          for (const registration of registrations) {\n            // unregister service worker\n            console.log('serviceWorker unregistered');\n            registration.unregister();\n\n            setTimeout(function(){\n              console.log('trying redirect do');\n              window.location.replace(window.location.href); // because without redirecting, first time on page load: still service worker will be available\n            }, 3000);\n          }\n        });\n      }\n    }\n  }\n\n\n\n}"],"names":["NotificationsController","Controller","checker","checked","subscribe","unsubscribe","permission","registration","subscription","post","error","serviceWorkerRegistration","unregister","e","registrations","keyList","key"],"mappings":"0HAGe,MAAMA,UAAgCC,CAAW,CAE9D,SAAU,CACO,KAAK,QACX,iBAAiB,SAAU,UAAY,CAC9CC,EAAQ,KAAK,OAAO,CAC1B,CAAK,EAED,SAASA,EAAQC,EAAS,CACxBA,EAAUC,EAAW,EAAGC,EAAa,CACtC,CAED,SAASD,GAAY,CACf,UAAU,eACZ,aAAa,kBAAmB,EAC/B,KAAME,GAAe,CAChBA,IAAe,UACjB,UAAU,cAAc,SAAS,mBAAmB,EACnD,KAAK,SAASC,EAAc,CAC3B,OAAOA,EAAa,YAAY,gBAAiB,EAChD,KAAK,SAASC,EAAc,CAC3B,OAAIA,GAGGD,EAAa,YAAY,UAAU,CACxC,gBAAiB,GACjB,qBAAsB,OAAO,cAC/C,CAAiB,CACjB,CAAe,CACf,CAAa,EAAE,KAAK,SAASC,EAAc,CAC7BC,EACE,2BAA4B,CAC1B,KAAM,CACJ,aAAcD,EAAa,OAAQ,CACpC,EACD,aAAc,cACf,CACF,CACf,CAAa,EAED,MAAM,wBAAwB,CAE1C,CAAS,EACA,MAAME,GAAS,QAAQ,IAAI,sBAAuBA,CAAK,CAAC,CAE5D,CAED,SAASL,GAAc,CACrB,UAAU,cAAc,MACvB,KAAMM,GAA8B,CACnCA,EAA0B,YAAY,gBAAiB,EACpD,KAAMH,GAAiB,CACjBA,IACHI,EAAY,EACZJ,EAAa,YAAa,EACvB,KAAK,UAAW,CACfC,EACE,6BAA8B,CAC5B,KAAM,CACJ,aAAcD,EAAa,OAAQ,CACpC,EACD,aAAc,cACf,CACF,CACnB,CAAiB,EACA,MAAOK,GAAM,CACZ,OAAO,MAAM,uDAAwDA,CAAC,CACxF,CAAiB,EAEjB,CAAW,CACX,CAAO,CACF,CAED,SAASD,GAAa,CACpB,UAAU,cAAc,iBAAkB,EACzC,KAAKE,GAAiB,CACrBA,EAAc,QAAQP,GAAgB,CACpCA,EAAa,WAAU,CACjC,CAAS,CACT,CAAO,EAED,UAAU,cAAc,iBAAkB,EAAC,KAAK,SAASO,EAAe,CACxE,QAAQP,KAAgBO,EACtBP,EAAa,WAAY,EACxB,EAEA,OAAO,WAAa,UAAU,eAC/B,UAAU,cAAc,iBAAkB,EACzC,KAAK,SAASO,EAAe,CAC5B,QAAQP,KAAgBO,EACtBP,EAAa,WAAU,CAEnC,CAAS,EAGC,WAAY,QACd,OAAO,KAAM,EACV,KAAK,SAASQ,EAAS,CACpB,OAAO,QAAQ,IAAIA,EAAQ,IAAI,SAASC,EAAK,CACzC,OAAO,OAAO,OAAOA,CAAG,CAC3B,CAAA,CAAC,CAChB,CAAW,EAGD,kBAAmB,WACrB,UAAU,cAAc,iBAAkB,EAAC,KAAK,SAAUF,EAAe,CACvE,UAAWP,KAAgBO,EAEzB,QAAQ,IAAI,4BAA4B,EACxCP,EAAa,WAAU,EAEvB,WAAW,UAAU,CACnB,QAAQ,IAAI,oBAAoB,EAChC,OAAO,SAAS,QAAQ,OAAO,SAAS,IAAI,CAC7C,EAAE,GAAI,CAEnB,CAAS,CAEJ,CACF,CAIH"}